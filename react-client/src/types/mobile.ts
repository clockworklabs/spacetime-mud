// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, SumType, SumTypeVariant, IDatabaseTable, AlgebraicValue } from "@clockworklabs/spacetimedb-sdk";

export class Mobile extends IDatabaseTable
{
	public static tableName = "Mobile";
	public spawnableEntityId: number;
	public name: string;
	public description: string;

	constructor(spawnableEntityId: number, name: string, description: string) {
	super();
		this.spawnableEntityId = spawnableEntityId;
		this.name = name;
		this.description = description;
	}

	public static serialize(value: Mobile): object {
		return [
		value.spawnableEntityId, value.name, value.description
		];
	}

	public static getAlgebraicType(): AlgebraicType
	{
		return AlgebraicType.createProductType([
			new ProductTypeElement("spawnable_entity_id", AlgebraicType.createPrimitiveType(BuiltinType.Type.U64)),
			new ProductTypeElement("name", AlgebraicType.createPrimitiveType(BuiltinType.Type.String)),
			new ProductTypeElement("description", AlgebraicType.createPrimitiveType(BuiltinType.Type.String)),
		]);
	}

	public static fromValue(value: AlgebraicValue): Mobile
	{
		let productValue = value.asProductValue();
		let __spawnable_entity_id = productValue.elements[0].asNumber();
		let __name = productValue.elements[1].asString();
		let __description = productValue.elements[2].asString();
		return new this(__spawnable_entity_id, __name, __description);
	}

	public static count(): number
	{
		return __SPACETIMEDB__.clientDB.getTable("Mobile").count();
	}

	public static all(): Mobile[]
	{
		return __SPACETIMEDB__.clientDB.getTable("Mobile").getInstances() as unknown as Mobile[];
	}

	public static filterBySpawnableEntityId(value: number): Mobile | null
	{
		for(let entry of __SPACETIMEDB__.clientDB.getTable("Mobile").getEntries())
		{
			var productValue = entry.asProductValue();
			let compareValue = productValue.elements[0].asNumber() as number;
			if (compareValue == value) {
				return Mobile.fromValue(entry);
			}
		}
		return null;
	}

	public static filterByName(value: string): Mobile[] | null
	{
		let result: Mobile[] = [];
		for(let entry of __SPACETIMEDB__.clientDB.getTable("Mobile").getEntries())
		{
			var productValue = entry.asProductValue();
			let compareValue = productValue.elements[1].asString() as string;
			if (compareValue == value) {
				result.push(Mobile.fromValue(entry));
			}
		}
		return result;
	}

	public static filterByDescription(value: string): Mobile[] | null
	{
		let result: Mobile[] = [];
		for(let entry of __SPACETIMEDB__.clientDB.getTable("Mobile").getEntries())
		{
			var productValue = entry.asProductValue();
			let compareValue = productValue.elements[2].asString() as string;
			if (compareValue == value) {
				result.push(Mobile.fromValue(entry));
			}
		}
		return result;
	}


	public static onInsert(callback: (value: Mobile) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("Mobile").onInsert(callback);
	}

	public static onUpdate(callback: (oldValue: Mobile, newValue: Mobile) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("Mobile").onUpdate(callback);
	}

	public static onDelete(callback: (value: Mobile) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("Mobile").onDelete(callback);
	}

	public static removeOnInsert(callback: (value: Mobile) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("Mobile").removeOnInsert(callback);
	}

	public static removeOnUpdate(callback: (oldValue: Mobile, newValue: Mobile) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("Mobile").removeOnUpdate(callback);
	}

	public static removeOnDelete(callback: (value: Mobile) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("Mobile").removeOnDelete(callback);
	}

}

export default Mobile;

__SPACETIMEDB__.registerComponent("Mobile", Mobile);
