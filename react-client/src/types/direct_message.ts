// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, SumType, SumTypeVariant, IDatabaseTable, AlgebraicValue } from "@clockworklabs/spacetimedb-sdk";

export class DirectMessage extends IDatabaseTable
{
	public static tableName = "DirectMessage";
	public whisperEntityId: number;
	public sourceSpawnableEntityId: number;
	public targetSpawnableEntityId: number;
	public chatText: string;
	public timestamp: number;

	constructor(whisperEntityId: number, sourceSpawnableEntityId: number, targetSpawnableEntityId: number, chatText: string, timestamp: number) {
	super();
		this.whisperEntityId = whisperEntityId;
		this.sourceSpawnableEntityId = sourceSpawnableEntityId;
		this.targetSpawnableEntityId = targetSpawnableEntityId;
		this.chatText = chatText;
		this.timestamp = timestamp;
	}

	public static serialize(value: DirectMessage): object {
		return [
		value.whisperEntityId, value.sourceSpawnableEntityId, value.targetSpawnableEntityId, value.chatText, value.timestamp
		];
	}

	public static getAlgebraicType(): AlgebraicType
	{
		return AlgebraicType.createProductType([
			new ProductTypeElement("whisper_entity_id", AlgebraicType.createPrimitiveType(BuiltinType.Type.U64)),
			new ProductTypeElement("source_spawnable_entity_id", AlgebraicType.createPrimitiveType(BuiltinType.Type.U64)),
			new ProductTypeElement("target_spawnable_entity_id", AlgebraicType.createPrimitiveType(BuiltinType.Type.U64)),
			new ProductTypeElement("chat_text", AlgebraicType.createPrimitiveType(BuiltinType.Type.String)),
			new ProductTypeElement("timestamp", AlgebraicType.createPrimitiveType(BuiltinType.Type.U64)),
		]);
	}

	public static fromValue(value: AlgebraicValue): DirectMessage
	{
		let productValue = value.asProductValue();
		let __whisper_entity_id = productValue.elements[0].asNumber();
		let __source_spawnable_entity_id = productValue.elements[1].asNumber();
		let __target_spawnable_entity_id = productValue.elements[2].asNumber();
		let __chat_text = productValue.elements[3].asString();
		let __timestamp = productValue.elements[4].asNumber();
		return new this(__whisper_entity_id, __source_spawnable_entity_id, __target_spawnable_entity_id, __chat_text, __timestamp);
	}

	public static count(): number
	{
		return __SPACETIMEDB__.clientDB.getTable("DirectMessage").count();
	}

	public static all(): DirectMessage[]
	{
		return __SPACETIMEDB__.clientDB.getTable("DirectMessage").getInstances() as unknown as DirectMessage[];
	}

	public static filterByWhisperEntityId(value: number): DirectMessage | null
	{
		for(let entry of __SPACETIMEDB__.clientDB.getTable("DirectMessage").getEntries())
		{
			var productValue = entry.asProductValue();
			let compareValue = productValue.elements[0].asNumber() as number;
			if (compareValue == value) {
				return DirectMessage.fromValue(entry);
			}
		}
		return null;
	}

	public static filterBySourceSpawnableEntityId(value: number): DirectMessage[] | null
	{
		let result: DirectMessage[] = [];
		for(let entry of __SPACETIMEDB__.clientDB.getTable("DirectMessage").getEntries())
		{
			var productValue = entry.asProductValue();
			let compareValue = productValue.elements[1].asNumber() as number;
			if (compareValue == value) {
				result.push(DirectMessage.fromValue(entry));
			}
		}
		return result;
	}

	public static filterByTargetSpawnableEntityId(value: number): DirectMessage[] | null
	{
		let result: DirectMessage[] = [];
		for(let entry of __SPACETIMEDB__.clientDB.getTable("DirectMessage").getEntries())
		{
			var productValue = entry.asProductValue();
			let compareValue = productValue.elements[2].asNumber() as number;
			if (compareValue == value) {
				result.push(DirectMessage.fromValue(entry));
			}
		}
		return result;
	}

	public static filterByChatText(value: string): DirectMessage[] | null
	{
		let result: DirectMessage[] = [];
		for(let entry of __SPACETIMEDB__.clientDB.getTable("DirectMessage").getEntries())
		{
			var productValue = entry.asProductValue();
			let compareValue = productValue.elements[3].asString() as string;
			if (compareValue == value) {
				result.push(DirectMessage.fromValue(entry));
			}
		}
		return result;
	}

	public static filterByTimestamp(value: number): DirectMessage[] | null
	{
		let result: DirectMessage[] = [];
		for(let entry of __SPACETIMEDB__.clientDB.getTable("DirectMessage").getEntries())
		{
			var productValue = entry.asProductValue();
			let compareValue = productValue.elements[4].asNumber() as number;
			if (compareValue == value) {
				result.push(DirectMessage.fromValue(entry));
			}
		}
		return result;
	}


	public static onInsert(callback: (value: DirectMessage) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("DirectMessage").onInsert(callback);
	}

	public static onUpdate(callback: (oldValue: DirectMessage, newValue: DirectMessage) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("DirectMessage").onUpdate(callback);
	}

	public static onDelete(callback: (value: DirectMessage) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("DirectMessage").onDelete(callback);
	}

	public static removeOnInsert(callback: (value: DirectMessage) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("DirectMessage").removeOnInsert(callback);
	}

	public static removeOnUpdate(callback: (oldValue: DirectMessage, newValue: DirectMessage) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("DirectMessage").removeOnUpdate(callback);
	}

	public static removeOnDelete(callback: (value: DirectMessage) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("DirectMessage").removeOnDelete(callback);
	}

}

export default DirectMessage;

__SPACETIMEDB__.registerComponent("DirectMessage", DirectMessage);
