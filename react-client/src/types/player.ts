// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, SumType, SumTypeVariant, IDatabaseTable, AlgebraicValue, ReducerEvent } from "@clockworklabs/spacetimedb-sdk";

export class Player extends IDatabaseTable
{
	public static tableName = "Player";
	public spawnableEntityId: number;
	public identity: Uint8Array;

	public static primaryKey: string | undefined = "spawnableEntityId";

	constructor(spawnableEntityId: number, identity: Uint8Array) {
	super();
		this.spawnableEntityId = spawnableEntityId;
		this.identity = identity;
	}

	public static serialize(value: Player): object {
		return [
		value.spawnableEntityId, Array.from(value.identity)
		];
	}

	public static getAlgebraicType(): AlgebraicType
	{
		return AlgebraicType.createProductType([
			new ProductTypeElement("spawnable_entity_id", AlgebraicType.createPrimitiveType(BuiltinType.Type.U32)),
			new ProductTypeElement("identity", AlgebraicType.createArrayType(AlgebraicType.createPrimitiveType(BuiltinType.Type.U8))),
		]);
	}

	public static fromValue(value: AlgebraicValue): Player
	{
		let productValue = value.asProductValue();
		let __spawnable_entity_id = productValue.elements[0].asNumber();
		let __identity = productValue.elements[1].asBytes();
		return new this(__spawnable_entity_id, __identity);
	}

	public static count(): number
	{
		return __SPACETIMEDB__.clientDB.getTable("Player").count();
	}

	public static all(): Player[]
	{
		return __SPACETIMEDB__.clientDB.getTable("Player").getInstances() as unknown as Player[];
	}

	public static filterBySpawnableEntityId(value: number): Player | null
	{
		for(let instance of __SPACETIMEDB__.clientDB.getTable("Player").getInstances())
		{
			if (instance.spawnableEntityId === value) {
				return instance;
			}
		}
		return null;
	}

	public static filterByIdentity(value: Uint8Array): Player | null
	{
		for(let instance of __SPACETIMEDB__.clientDB.getTable("Player").getInstances())
		{
			let byteArrayCompare = function (a1: Uint8Array, a2: Uint8Array)
			{
			    if (a1.length !== a2.length)
			        return false;

			    for (let i=0; i<a1.length; i++)
			        if (a1[i]!==a2[i])
			            return false;

			    return true;
			}

			if (byteArrayCompare(instance.identity, value)) {
				return instance;
			}
		}
		return null;
	}


	public static onInsert(callback: (value: Player, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("Player").onInsert(callback);
	}

	public static onUpdate(callback: (oldValue: Player, newValue: Player, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("Player").onUpdate(callback);
	}

	public static onDelete(callback: (value: Player, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("Player").onDelete(callback);
	}

	public static removeOnInsert(callback: (value: Player, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("Player").removeOnInsert(callback);
	}

	public static removeOnUpdate(callback: (oldValue: Player, newValue: Player, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("Player").removeOnUpdate(callback);
	}

	public static removeOnDelete(callback: (value: Player, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("Player").removeOnDelete(callback);
	}

}

export default Player;

__SPACETIMEDB__.registerComponent("Player", Player);
