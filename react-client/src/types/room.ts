// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, SumType, SumTypeVariant, IDatabaseTable, AlgebraicValue, ReducerEvent } from "@clockworklabs/spacetimedb-sdk";
// @ts-ignore
import { Exit } from "./exit";

export class Room extends IDatabaseTable
{
	public static tableName = "Room";
	public roomId: string;
	public zoneId: string;
	public name: string;
	public description: string;
	public exits: Exit[];

	public static primaryKey: string | undefined = "room_id";

	constructor(roomId: string, zoneId: string, name: string, description: string, exits: Exit[]) {
	super();
		this.roomId = roomId;
		this.zoneId = zoneId;
		this.name = name;
		this.description = description;
		this.exits = exits;
	}

	public static serialize(value: Room): object {
		return [
		value.roomId, value.zoneId, value.name, value.description, value.exits.map(el => Exit.serialize(el))
		];
	}

	public static getAlgebraicType(): AlgebraicType
	{
		return AlgebraicType.createProductType([
			new ProductTypeElement("room_id", AlgebraicType.createPrimitiveType(BuiltinType.Type.String)),
			new ProductTypeElement("zone_id", AlgebraicType.createPrimitiveType(BuiltinType.Type.String)),
			new ProductTypeElement("name", AlgebraicType.createPrimitiveType(BuiltinType.Type.String)),
			new ProductTypeElement("description", AlgebraicType.createPrimitiveType(BuiltinType.Type.String)),
			new ProductTypeElement("exits", AlgebraicType.createArrayType(Exit.getAlgebraicType())),
		]);
	}

	public static fromValue(value: AlgebraicValue): Room
	{
		let productValue = value.asProductValue();
		let __room_id = productValue.elements[0].asString();
		let __zone_id = productValue.elements[1].asString();
		let __name = productValue.elements[2].asString();
		let __description = productValue.elements[3].asString();
		let __exits = productValue.elements[4].asArray().map(el => Exit.fromValue(el)) as Exit[];
		;
		return new this(__room_id, __zone_id, __name, __description, __exits);
	}

	public static count(): number
	{
		return __SPACETIMEDB__.clientDB.getTable("Room").count();
	}

	public static all(): Room[]
	{
		return __SPACETIMEDB__.clientDB.getTable("Room").getInstances() as unknown as Room[];
	}

	public static filterByRoomId(value: string): Room | null
	{
		for(let instance of __SPACETIMEDB__.clientDB.getTable("Room").getInstances())
		{
			if (instance.roomId === value) {
				return instance;
			}
		}
		return null;
	}

	public static filterByZoneId(value: string): Room[]
	{
		let result: Room[] = [];
		for(let instance of __SPACETIMEDB__.clientDB.getTable("Room").getInstances())
		{
			if (instance.zoneId === value) {
				result.push(instance);
			}
		}
		return result;
	}

	public static filterByName(value: string): Room[]
	{
		let result: Room[] = [];
		for(let instance of __SPACETIMEDB__.clientDB.getTable("Room").getInstances())
		{
			if (instance.name === value) {
				result.push(instance);
			}
		}
		return result;
	}

	public static filterByDescription(value: string): Room[]
	{
		let result: Room[] = [];
		for(let instance of __SPACETIMEDB__.clientDB.getTable("Room").getInstances())
		{
			if (instance.description === value) {
				result.push(instance);
			}
		}
		return result;
	}


	public static onInsert(callback: (value: Room, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("Room").onInsert(callback);
	}

	public static onUpdate(callback: (oldValue: Room, newValue: Room, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("Room").onUpdate(callback);
	}

	public static onDelete(callback: (value: Room, oldValue: Room, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("Room").onDelete(callback);
	}

	public static removeOnInsert(callback: (value: Room, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("Room").removeOnInsert(callback);
	}

	public static removeOnUpdate(callback: (oldValue: Room, newValue: Room, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("Room").removeOnUpdate(callback);
	}

	public static removeOnDelete(callback: (value: Room, oldValue: Room, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("Room").removeOnDelete(callback);
	}

}

export default Room;

__SPACETIMEDB__.registerComponent("Room", Room);
