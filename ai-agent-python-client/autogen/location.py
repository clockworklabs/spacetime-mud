# THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
# WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

from __future__ import annotations
from typing import List, Iterator, Callable

from spacetimedb_sdk.spacetimedb_client import SpacetimeDBClient

class Location:
	is_table_class = True

	primary_key = "spawnable_entity_id"

	@classmethod
	def register_row_update(cls, callback: Callable[[str,Location,Location], None]):
		SpacetimeDBClient.instance._register_row_update("Location",callback)

	@classmethod
	def iter(cls) -> Iterator[Location]:
		return SpacetimeDBClient.instance._get_table_cache("Location").values()

	@classmethod
	def filter_by_spawnable_entity_id(cls, spawnable_entity_id) -> Location:
		return next(iter([column_value for column_value in SpacetimeDBClient.instance._get_table_cache("Location").values() if column_value.spawnable_entity_id == spawnable_entity_id]), None)

	@classmethod
	def filter_by_room_id(cls, room_id) -> List[Location]:
		return [column_value for column_value in SpacetimeDBClient.instance._get_table_cache("Location").values() if column_value.room_id == room_id]

	@classmethod
	def filter_by_last_room_id(cls, last_room_id) -> List[Location]:
		return [column_value for column_value in SpacetimeDBClient.instance._get_table_cache("Location").values() if column_value.last_room_id == last_room_id]

	def __init__(self, data: List[object]):
		self.data = {}
		self.data["spawnable_entity_id"] = int(data[0])
		self.data["room_id"] = str(data[1]['0']) if '0' in data[1] else None
		self.data["last_room_id"] = str(data[2]['0']) if '0' in data[2] else None

	def encode(self) -> List[object]:
		return [self.spawnable_entity_id, {'0': [self.room_id]}, {'0': [self.last_room_id]}]

	def __getattr__(self, name: str):
		return self.data.get(name)
